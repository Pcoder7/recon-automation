name: Parallel Subdomain Enumeration and Live Host Check

on:
  schedule:
    - cron: "0 10 * * *"  # Runs every day at 10:00 AM UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate_matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # Fetch full Git history so previous commits are available for comparison
          fetch-depth: 0        

      - name: Generate Matrix from domains.txt
        id: set_matrix
        run: |
          if [ ! -f domains.txt ]; then
            echo "domains.txt file not found!"
            exit 1
          fi
          # Create a JSON array from non-empty lines in domains.txt
          matrix=$(jq -R -s -c 'split("\n") | map(select(length > 0))' domains.txt)
          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  scan:
    needs: generate_matrix
    runs-on: ubuntu-latest
    container:
      # Use the exact same container for consistency with the primary account
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}      
    strategy:
      fail-fast: false
      matrix:
        domain: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # Fetch full Git history so previous commits are available for comparison
          fetch-depth: 0   
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules & binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-go-cache-
         
      
      - name: Install Tools
        run: |

          # Installing smap
          if ! command -v smap >/dev/null; then
            echo "Installing smapâ€¦"
            go install -v github.com/s0md3v/smap/cmd/smap@latest
          else
            echo "smap already in cache"
          fi    
         
          pip3 install --no-cache-dir ipaddress
          
          echo "$HOME/go/bin" >> $GITHUB_PATH
          
  

      - name: Install interlace tool
        shell: bash
        run: |
          python3 --version
          git clone https://github.com/codingo/Interlace.git
          cd Interlace
          python3 -m pip install -r requirements.txt
          pip3 install .
          python3 Interlace/interlace.py -h
          cd ..

      - name: Run Subdomain Enumeration for ${{ matrix.domain }}
        shell: bash
        run: |
          echo "Scanning domain: ${{ matrix.domain }}"
          interlace \
          -t ${{ matrix.domain }} \
          -threads 3 \
          -cL cli.txt \
          -o results/${{ matrix.domain }} \
          -v
          # Combine results and deduplicate into combined.txt
          cat results/${{ matrix.domain }}/subfinder.txt results/${{ matrix.domain }}/assetfinder.txt results/${{ matrix.domain }}/amass.txt | sort -u > results/${{ matrix.domain }}/all_subdomains.txt
          wc -l results/${{ matrix.domain }}/all_subdomains.txt
       
      - name: Upload all_subdomains.txt for 
        uses: actions/upload-artifact@v4
        with:
          name: recon-results-${{ matrix.domain }}
          path: results/${{ matrix.domain }}


    
      - name: Commit and Push Results for ${{ matrix.domain }}
        run: |
          
          git config --global --add safe.directory "$GITHUB_WORKSPACE"        
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add results/${{ matrix.domain }}/dnsx.json \
            results/${{ matrix.domain }}/subfinder.txt \
            results/${{ matrix.domain }}/assetfinder.txt \
            results/${{ matrix.domain }}/amass.txt \
            results/${{ matrix.domain }}/all_subdomains.txt 

          if git diff --staged --quiet; then
            echo "No changes to commit. Exiting."
            exit 0
          fi
          # 4. Commit the changes once, before the loop
          git commit -m "Daily Recon: Update subdomain results"

          # 5. Create a retry loop to handle potential race conditions during the push
          echo "Attempting to push changes with a retry loop..."
          for i in {1..5}
          do
            # First, pull the latest changes from the remote branch using rebase
            # This places our new commit on top of any other recent commits
            git pull --rebase

            # Now, attempt to push
            if git push; then
              echo "Push successful on attempt $i."
              # If push is successful, exit the script with a success code
              exit 0
            fi

            # If push failed, wait for a bit before the next attempt
            echo "Push failed on attempt $i. Retrying in 5 seconds..."
            sleep 5
          done

          # 6. If the loop completes without a successful push, exit with an error
          echo "Failed to push changes after 5 attempts."
          exit 1
