name: Parallel Subdomain Enumeration and Live Host Check

on:
  schedule:
    - cron: "0 10 * * *"  # Runs every day at 10:00 AM UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate_matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # Fetch full Git history so previous commits are available for comparison
          fetch-depth: 0        

      - name: Generate Matrix from domains.txt
        id: set_matrix
        run: |
          if [ ! -f domains.txt ]; then
            echo "domains.txt file not found!"
            exit 1
          fi
          # Create a JSON array from non-empty lines in domains.txt
          matrix=$(jq -R -s -c 'split("\n") | map(select(length > 0))' domains.txt)
          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  subdomain_scan:
    needs: generate_matrix
    runs-on: ubuntu-latest
    container:
      # Use the exact same container for consistency with the primary account
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}      
    strategy:
      fail-fast: false
      matrix:
        domain: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # Fetch full Git history so previous commits are available for comparison
          fetch-depth: 0   
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules & binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-go-cache-
         
      
      - name: Install Tools
        run: |

          # Installing smap
          if ! command -v smap >/dev/null; then
            echo "Installing smap…"
            go install -v github.com/s0md3v/smap/cmd/smap@latest
          else
            echo "smap already in cache"
          fi    

          # Installing inscope
          if ! command -v inscope >/dev/null; then
            echo "Installing inscope…"
            go install -v github.com/tomnomnom/hacks/inscope@latest
          else
            echo "inscope already in cache"
          fi    
          
          if ! command -v anew >/dev/null; then
            echo "Installing anew…"
            go install -v github.com/tomnomnom/anew@latest
          else
            echo "anew already in cache"
          fi

          if ! command -v shrewdeye >/dev/null; then
            echo "Installing Shrewdeye…"
            go install -v github.com/omkar7505/shrewdeye@latest
          else
            echo "shrewdeye already in cache"
          fi
          
          pip3 install --no-cache-dir ipaddress
          
          echo "$HOME/go/bin" >> $GITHUB_PATH
          
  
      - name: Install interlace tool
        shell: bash
        run: |
          python3 --version
          git clone https://github.com/codingo/Interlace.git
          cd Interlace
          python3 -m pip install -r requirements.txt
          pip3 install .
          python3 Interlace/interlace.py -h
          cd ..

      - name: Run Subdomain Enumeration for ${{ matrix.domain }}
        shell: bash
        run: |
          echo "Scanning domain: ${{ matrix.domain }}"
          oneforall --help
          interlace \
          -t ${{ matrix.domain }} \
          -threads 3 \
          -cL cli.txt \
          -o results/${{ matrix.domain }} \
          -v
          # Combine results and deduplicate into combined.txt
          cat results/${{ matrix.domain }}/subfinder.txt results/${{ matrix.domain }}/assetfinder.txt results/${{ matrix.domain }}/amass.txt | sort -u > results/${{ matrix.domain }}/all_subdomains.txt
          wc -l results/${{ matrix.domain }}/all_subdomains.txt
       
      - name: Upload all_subdomains.txt for 
        uses: actions/upload-artifact@v4
        with:
          name: recon-results-${{ matrix.domain }}
          path: results/${{ matrix.domain }}
          retention-days: 1

  commit_results:
    name: Commit All Recon Results
    # This job runs after all parallel scan jobs are finished.
    needs: subdomain_scan
    # 'if: always()' ensures we commit results from successful scans even if some scans failed.
    if: always()
    runs-on: ubuntu-latest
    container:
      # Use the same container to ensure tools like 'anew' are available.
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Download all recon artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts into separate directories under 'temp-results'
          pattern: recon-results-*
          path: temp-results/

      - name: Organize and Push to store-recon
        id: Organize-push
        env:
          STORE_RECON_PAT: ${{ secrets.STORE_RECON_PAT }}
          STORE_REPO_OWNER: ${{ secrets.STORE_OWNER }} # IMPORTANT: Change to the owner of store-recon
          STORE_REPO_NAME: ${{ secrets.STORE_REPO_NAME }}
        run: |
          set -e # Exit immediately if a command fails

          if [ ! -d "temp-results" ] || [ -z "$(ls -A temp-results)" ]; then
            echo "No artifacts found to process. Exiting."
            exit 0
          fi

          echo "Cloning the 'store-recon' repository..."
          CLONE_DIR=$(mktemp -d)
          git clone "https://x-access-token:${STORE_RECON_PAT}@github.com/${STORE_REPO_OWNER}/${STORE_REPO_NAME}.git" "$CLONE_DIR"
          cd "$CLONE_DIR"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Robust retry loop to handle any remote race conditions on the store-recon repo
          for i in {1..10}; do
            # Always start from the freshest state of the remote branch
            git fetch origin main
            git reset --hard origin/main
            git pull origin main --rebase

            echo "Merging new results into the repository..."

            # Iterate through each downloaded artifact directory (e.g., 'temp-results/recon-results-domain1.com')
            for artifact_path in ${GITHUB_WORKSPACE}/temp-results/*; do
              if [ -d "$artifact_path" ]; then
                source_file="$artifact_path/all_subdomains.txt"
                
                # Check if the primary results file exists in the artifact
                if [ -f "$source_file" ]; then
                  # Extract the domain name by removing the 'recon-results-' prefix from the directory name
                  domain=$(basename "$artifact_path" | sed 's/^recon-results-//')
                  
                  # Define the target directory structure as requested: 'results/domain.com/'
                  target_dir="results/$domain"
                  target_file="$target_dir/all_subdomains.txt"

                  echo "Processing results for: $domain"
                  
                  # Create the target directory (e.g., 'results/domain1.com').
                  # 'mkdir -p' will do nothing if the directory already exists. It will not overwrite.
                  mkdir -p "$target_dir"

                  # This is the key command for your requirement:
                  # It reads the new results and appends only the unique, new lines to the target file.
                  # If the target file doesn't exist, 'anew' creates it.
                  cat "$source_file" | anew -q "$target_file"
                fi
              fi
            done

            git add results/

            # Check for changes before committing to avoid empty commits
            if git diff --staged --quiet; then
              echo "No new unique subdomains found. Repository is already up-to-date."
              exit 0
            fi

            echo "Committing updated results..."
            git commit -m "Daily Recon: Update subdomain results (Run: ${{ github.run_id }})"

            if git push origin main; then
              echo "Successfully pushed results to ${STORE_REPO_NAME} on attempt #$i."
              exit 0 # Success!
            else
              echo "Push failed on attempt #$i. Retrying in 15 seconds..."
              sleep 15
            fi
          done

          echo "ERROR: Could not push results to ${STORE_REPO_NAME} after 10 attempts."
          exit 1

  
  trigger_puredns:
    name: Trigger PureDNS Workflow
    needs:  commit_results # This job runs only after the commit job is done
    
    runs-on: ubuntu-latest
    steps:
      - name: Trigger PureDNS Workflow using repository_dispatch
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        id: trigger-puredns  
        run: |
          echo "Triggering the 'Parallel PureDNS Split, Resolve, and Sort' workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${PAT_TOKEN}" \
            https://api.github.com/repos/Pcoder7/puredns-res/dispatches \
            -d '{"event_type": "trigger_puredns", "client_payload": {"results_repo": "${{ github.repository }}", "results_dir": "results", "run_id": ${{ github.run_id }} }}'

          
