name: Parallel Subdomain Enumeration and Live Host Check

on:
  schedule:
    - cron: "0 10 * * *"  # Runs every day at 10:00 AM UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Matrix from domains.txt
        id: set_matrix
        run: |
          if [ ! -f domains.txt ]; then
            echo "domains.txt file not found!"
            exit 1
          fi
          # Create a JSON array from non-empty lines in domains.txt
          matrix=$(jq -R -s -c 'split("\n") | map(select(length > 0))' domains.txt)
          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  scan:
    needs: generate_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        domain: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Update & Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl git jq unzip

      - name: Install massdns (prerequisite for puredns)
        run: |
          git clone https://github.com/blechschmidt/massdns.git
          cd massdns
          make
          sudo make install          

      - name: Install Tools
        run: |
          # Install subfinder
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          # Install httpx
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          # Install assetfinder
          go install -v github.com/tomnomnom/assetfinder@latest
          # Install Amass v3.23.3 (uncomment if needed)
          # curl -LO https://github.com/OWASP/Amass/releases/download/v3.23.3/amass_linux_amd64_v3.23.3.zip
          # unzip amass_linux_amd64_v3.23.3.zip
          # sudo mv amass_linux_amd64_v3.23.3/amass /usr/local/bin/
          # rm -rf amass_linux_amd64_v3.23.3*
          # Install puredns (v2)
          go install github.com/d3mondev/puredns/v2@latest
          # Install alterx for subdomain permutation & enrichment
          go install github.com/projectdiscovery/alterx/cmd/alterx@latest        
          # Install cdncheck
          go install -v github.com/projectdiscovery/cdncheck/cmd/cdncheck@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Download resolvers.txt
        run: |
          curl -sLo resolvers.txt https://raw.githubusercontent.com/trickest/resolvers/refs/heads/main/resolvers.txt
          curl -sLo resolvers-trusted.txt https://raw.githubusercontent.com/trickest/resolvers/refs/heads/main/resolvers-trusted.txt

      - name: Download Subdomain Wordlists
        run: |
          curl -sLo level1.txt https://raw.githubusercontent.com/trickest/wordlists/refs/heads/main/inventory/levels/level1.txt
          curl -sLo level2.txt https://raw.githubusercontent.com/trickest/wordlists/refs/heads/main/inventory/levels/level2.txt
          curl -sLo level3.txt https://raw.githubusercontent.com/trickest/wordlists/refs/heads/main/inventory/levels/level3.txt
          cat level1.txt level2.txt level3.txt > all_levels.txt          

      - name: Create Results Directory for ${{ matrix.domain }}
        run: mkdir -p results/${{ matrix.domain }}

      - name: Run Subdomain Enumeration for ${{ matrix.domain }}
        run: |
          echo "Scanning domain: ${{ matrix.domain }}"
          # Run subfinder
          subfinder -d "${{ matrix.domain }}" -silent -o results/${{ matrix.domain }}/subfinder.txt
          # Run assetfinder
          assetfinder --subs-only "${{ matrix.domain }}" > results/${{ matrix.domain }}/assetfinder.txt
          # Uncomment to run Amass if needed:
          # amass enum -d "${{ matrix.domain }}" -o results/${{ matrix.domain }}/amass.txt
          # Combine results and deduplicate into combined.txt
          cat results/${{ matrix.domain }}/subfinder.txt results/${{ matrix.domain }}/assetfinder.txt | sort -u > results/${{ matrix.domain }}/combined.txt

          echo "Scanning Live domain: ${{ matrix.domain }}"
          # Check for live hosts with httpx
          cat results/${{ matrix.domain }}/combined.txt | httpx -silent -o results/${{ matrix.domain }}/live.txt
          # Run cdncheck on combined.txt and output cdncheck.txt
          cat results/${{ matrix.domain }}/combined.txt | cdncheck -r resolvers.txt -no-color -resp -retry 1 -output results/${{ matrix.domain }}/cdncheck.txt
      
      - name: Run puredns Bruteforce for ${{ matrix.domain }}
        run: |
          echo "Running puredns bruteforce for ${{ matrix.domain }}"
          cat all_levels.txt | puredns bruteforce ${{ matrix.domain }} -r resolvers.txt --resolvers-trusted resolvers-trusted.txt --write results/${{ matrix.domain }}/bruteforce_res.txt
          cat results/${{ matrix.domain }}/bruteforce_res.txt | sort -u > results/${{ matrix.domain }}/bruteforce_result.txt
          rm results/${{ matrix.domain }}/bruteforce_res.txt
          
      - name: Resolve Combined Results using puredns for ${{ matrix.domain }}
        run: |
          echo "Resolving combined subdomains for ${{ matrix.domain }}"
          puredns resolve results/${{ matrix.domain }}/combined.txt -r resolvers.txt --resolvers-trusted resolvers-trusted.txt --write results/${{ matrix.domain }}/resolved_comb.txt
          cat results/${{ matrix.domain }}/resolved_comb.txt | sort -u > results/${{ matrix.domain }}/resolved_combined.txt
          rm results/${{ matrix.domain }}/resolved_comb.txt
          
      - name: Combine Bruteforce and Resolved Results for ${{ matrix.domain }}
        run: |
          cat results/${{ matrix.domain }}/bruteforce_result.txt results/${{ matrix.domain }}/resolved_combined.txt | sort -u > results/${{ matrix.domain }}/puredns_combined.txt

      - name: Enrich Subdomains Using alterx for ${{ matrix.domain }}
        run: |
          echo "Enriching subdomain list for ${{ matrix.domain }} using alterx"
          cat results/${{ matrix.domain }}/puredns_combined.txt | alterx -enrich > results/${{ matrix.domain }}/alterx_enriched.txt

      - name: Resolve Alterx Enriched Subdomains Using puredns for ${{ matrix.domain }}
        run: |
          echo "Resolving enriched subdomains for ${{ matrix.domain }} via puredns"
          puredns resolve results/${{ matrix.domain }}/alterx_enriched.txt -r resolvers.txt --resolvers-trusted resolvers-trusted.txt --write results/${{ matrix.domain }}/alterx_duplicate.txt
          cat results/${{ matrix.domain }}/alterx_duplicate.txt | sort -u > results/${{ matrix.domain }}/alterx.txt
          rm results/${{ matrix.domain }}/alterx_duplicate.txt
      
      - name: Compare Results for ${{ matrix.domain }}
        id: compare
        run: |
          # Compare only the combined.txt file (which contains subdomain enumeration output)
          git diff --unified=0 --no-color results/${{ matrix.domain }}/combined.txt | grep '^+[^+]' | sed 's/^+//' > results/${{ matrix.domain }}/new_subdomains.txt
          if [ -s results/${{ matrix.domain }}/new_subdomains.txt ]; then
            echo "has_new_subdomains=true" >> $GITHUB_OUTPUT
          else
            echo "has_new_subdomains=false" >> $GITHUB_OUTPUT
          fi  

      - name: Install notify
        env: 
          DISCORD_WEBHOOK: ${{ secrets.DIS_WEBHOOK }}
        run: |
          go install -v github.com/projectdiscovery/notify/cmd/notify@latest
          mkdir -p ~/.config/notify/
          cat <<EOF > ~/.config/notify/provider-config.yaml
              # Write provider config with our Discord webhook
          discord:
            - id: "subscan"
              discord_channel: "subdomain-scan"
              discord_format: "{{data}}"
              discord_webhook_url: "${{ secrets.DIS_WEBHOOK }}"
          EOF
          # display and show provider-config.yaml file
          cat ~/.config/notify/provider-config.yaml  

      - name: Debug: Echo DISCORD_WEBHOOK
        run: | 
          echo "$DIS_WEBHOOK"
          sed -e 's/.*/&/' ~/.config/notify/provider-config.yaml
        env:
          DISCORD_WEBHOOK: ${{ secrets.DIS_WEBHOOK }}
    
      - name: 'Notify Discord for ${{ matrix.domain }}'
        run: |
          DATE=$(date +"%d-%m-%Y")
          new_file="results/${{ matrix.domain }}/new_subdomains.txt"
          if [ -f "$new_file" ]; then
            count=$(wc -l < "$new_file")
            if [ "$count" -gt 50 ]; then
              echo "[+] New subdomains > 50 for ${{ matrix.domain }}. Sending file."
              notify -bulk -id discord-webhook -data "$new_file"
            elif [ "$count" -gt 0 ]; then
              echo "[+] New subdomains â‰¤ 50 for ${{ matrix.domain }}. Sending line by line."
              {
                echo "New subdomains for ${{ matrix.domain }}"
                echo "Date - $DATE"
                cat "$new_file"
              } > tmp_message.txt
              notify -id discord-webhook -data tmp_message.txt
            else
              echo "No new subdomains for ${{ matrix.domain }}."
            fi
          else
            echo "new_subdomains.txt not found for ${{ matrix.domain }}."
          fi
             

      - name: Commit and Push Results for ${{ matrix.domain }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add results/${{ matrix.domain }}
          git commit -m "Update subdomain results for ${{ matrix.domain }}" || echo "No changes to commit"
          git pull --rebase origin main || echo "No remote changes"
          git push || echo "Push failed or no changes to push"

  trigger_nuclei:
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Trigger Nuclei Scanning in nuclei-automation
        env:
          # For public repositories the default GITHUB_TOKEN may be used;
          # For private repositories, store a PAT with "repo" scope as PAT_TOKEN.
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${PAT_TOKEN}" \
            https://api.github.com/repos/Pcoder7/nuclei-automation/dispatches \
            -d '{"event_type": "trigger_nuclei", "client_payload": {"results_repo": "Pcoder7/recon-automation", "results_dir": "results"}}'
